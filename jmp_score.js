"use strict"; 

/*-----------------------------------------------------------------
* jmp_score.js
* Helper module with defines and functions supporting 
* the JavaScript language scoring code generated by JMP
*
* Required by customer code: Yes
* Follows the require.js module convention
* Use with a compatible environment like node.js or browserify
*-----------------------------------------------------------------*/

var squish = function(x) {
    return 1.0 / (1.0 + Math.exp(-x));
};

var squash = function(x) {
    return 1.0 / (1.0 + Math.exp(x));
};

var is_missing = function (x) {
    return (typeof num1 == 'number' && (isNaN(x) || !isFinite(x)))
        || x === undefined; 
};

/*-----------------------------------------------------------------
 * return the index of the max value found in an array
 * or -1 if all are missing
 *-----------------------------------------------------------------*/
var max_array = function(n, lst) {
    var maxval = -Infinity;
    var maxidx = 0;
    var count_miss = 0;
    
    for (var i = 0; i < n; i++) {
        if (is_missing(lst[i])) {
            count_miss++;
        }
        else if (maxval < lst[i]) {
            maxval = lst[i];
            maxidx = i;
        }
    }
    return (count_miss == n) ? -1 : maxidx;
};

/*-----------------------------------------------------------------
 * return the index of the min value found in an array
 * or -1 if all are missing
 *-----------------------------------------------------------------*/
var min_array = function(n, lst) {
    var minval = Infinity;
    var minidx = 0;
    var count_miss = 0;
    
    for (var i = 0; i < n; i++) {
        if (is_missing(lst[i])) {
            count_miss++;
        }
        else if (minval > lst[i]) {
            minval = lst[i];
            minidx = i;
        }
    }
    return (count_miss == n) ? -1 : minidx;
};

/*-----------------------------------------------------------------
 * Returns true if the numbers are identical using straight comparison.
 * If necessary, replace with a suitable comparison using a value of EPSILON
 * appropriate for your domain.
 *-----------------------------------------------------------------*/
var numeq = function(x, y) {
    return x == y;
    //  return Math.abs(a - b) < EPSILON;
}

module.exports = {
  squish: squish,
  squash: squash,
  is_missing: is_missing,
  max_array: max_array,
  min_array: min_array,
  numeq: numeq
};

